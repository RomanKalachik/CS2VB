using ICSharpCode.CodeConverter.CSharp;
using ICSharpCode.CodeConverter.Shared;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.MSBuild;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using SearchOption = System.IO.SearchOption;

namespace CodeConverter.Tests.TestRunners
{
    public class SimpleProgressCallback : IProgress<string>
    {
        public void Report(string value)
        {
            Debug.WriteLine(value);
        }
    }
    /// <summary>
    /// For all files in the testdata folder relevant to the testname, ensures they match the result of the conversion.
    /// Any extra files generated by the conversion are ignored.
    /// </summary>
    public class ProjectConverterBase
    {
        /// <summary>
        /// Leave this set to false when committing.
        /// Turn it on to manually check the output loads in VS.
        /// Commit only the modified files.
        /// </summary>
        private bool _writeNewCharacterization = false;

        public async Task ConvertProjectsWhere<TLanguageConversion>(string solutionPath, Func<Project, bool> shouldConvertProject, [CallerMemberName] string testName = "") where TLanguageConversion : ILanguageConversion, new()
        {
            using (var workspace = MSBuildWorkspace.Create(new Dictionary<string, string>()
            {
                {"Configuration", "Debug"},
                {"Platform", "AnyCPU"},  { "CheckForSystemRuntimeDependency", "true" }
            })) {
                var originalSolutionDir = Path.GetDirectoryName(solutionPath);
                var solutionFile = solutionPath;//Directory.GetFiles(originalSolutionDir, "ChartsDemo.Wpf.sln", SearchOption.TopDirectoryOnly).FirstOrDefault();

                var solution = await workspace.OpenSolutionAsync(solutionFile);
                var languageNameToConvert = typeof(TLanguageConversion) == typeof(VBToCSConversion)
                    ? LanguageNames.VisualBasic
                    : LanguageNames.CSharp;
                var projectsToConvert = solution.Projects.Where(p => p.Language == languageNameToConvert && shouldConvertProject(p)).ToArray();
               var conversionResults =  SolutionConverter.CreateFor<TLanguageConversion>(projectsToConvert, new SimpleProgressCallback())
                    .Convert()
                    //.GetAwaiter()
                    //.GetResult()
                    .ToDictionary(c => c.TargetPathOrNull, StringComparer.OrdinalIgnoreCase);
                foreach (var conversionResult in conversionResults) {
                    var expectedFilePath = conversionResult.Key.Replace(originalSolutionDir, originalSolutionDir + "\\VB\\");
                    Directory.CreateDirectory(Path.GetDirectoryName(expectedFilePath));
                    File.WriteAllText(expectedFilePath, conversionResult.Value.ConvertedCode);
                }
            }
        }
    }
}